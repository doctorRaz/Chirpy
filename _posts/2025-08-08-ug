---
title: Быстрый старт
author: doctorraz
date: 2025-08-08 14:10:00 +0800
categories: [Blogging, Tutorial]
tags: [writing]
render_with_liquid: false
---

# Быстрый старт
 
> [!TIP]
Утилита умеет генерировать конфигурации из \*.xls напрямую, без промежуточного текстового файла. \
Наличие _Excel_ на машине не требуется.

> [!IMPORTANT]
> Сохранена возможность генерации конфигов из текстовых файлов  \*.tsv (файл в кодировке юникод разделитель табуляция)\
> Добавлена возможность создания конфигов из \*.csv (файл в кодировке ANSI, разделитель, точка с запятой.\
> Тип файла определяется по расширению:
> - \*.xls, \*.xlsm - Excel;
> - \*.csv - ANSI, разделитель, точка с запятой;
> - остальные расширения программа будет пытаться читать как: юникод, разделитель табуляция
 ---

1. В [шаблоне](https://github.com/doctorRaz/MenuFilesGen/tree/main/example) заполняем [обязательные поля](#обязательные-поля)
<details><summary>(в всплывающих подсказках написано, какой столбец, для чего предназначен)</summary>
<p>
<img  alt="image" src="img/required_template_XLS.png" />
</p>
</details> 
 
> [!WARNING]
>  `InterName` **- допускаются только символы латиницы, без пробелов!!!.**  
> nanoCAD не понимает команды на кириллице\
>   Команда  в которой есть символы кириллицы не зарегистрируется!!! \
>   если требуется локализованное имя команды, то оно задается в столбце `LocalName` см . [дополнительные поля](#дополнительные-поля )
 2. Сохраняем \*.xls файл
3. Запускаем генератор меню
4. Указываем имя файла \*.xls
5. В ком строке вводим номер листа
6. Рядом с файлом \*.xls появятся:
> - файл конфигурации \*.cfg (классическое меню, панельки, команды)
> - файл ленты Ribbon \*.cuix

Имена файлов конфигурации формируются:
  > - для текстовых файлов: имя файлов конфигураций `*.cfg`, `*.cuix` = имя файла шаблона
  > - для \*.xls название листа = имя файлов конфигураций \
Заполненные обязательные поля достаточны для формирования корректного меню, панелей и ленты.

## Поля шаблона

### Обязательные поля

> [!IMPORTANT]
Описание обязательных полей шаблона

|Параметр|Пример|Описание|Комментарий|
|---|---|---|---|
|InterName|-drz-block-Linetype-ByBlock|Имя выполняемой команды<br/>Может быть внутренним именем команды, как оно определено в dll, nrx, lsp||
|DispName|Тип линий по блоку|Имя команды, как оно будет показываться в меню||
|PanelName|Свойства примитивов|Имя панели<br>подменю<br/> группы ленты|<img width="211"   alt="image" src="https://github.com/user-attachments/assets/9d8c28a3-0e94-4776-b043-1b2eff86b94e" />|
|RibbonSize|LargeWithText<br/>**Варианты:** <br/>None<br/>SmallWithText<br/>LargeWithText<br/>SmallWithoutText<br/>LargeWithoutText<br/>|Размер кнопки на ленте. <br>None - кнопки не будет<br/>|<img width="124"   alt="image" src="https://github.com/user-attachments/assets/e33fda9f-6685-4fbd-ad81-257931c82375" />|

### Дополнительные поля

> [!TIP]
 Описание необязательных полей шаблона 

Параметр|Пример|Описание|Комментарий|
|---|---|---|---|
|RibbonSplitButtonName|Порядок|Название сплитера ленты, если пусто иконки не будут прятаться под сплитер|<img width="204"   alt="image" src="https://github.com/user-attachments/assets/c53f2199-6468-45f9-9a50-278272b2f055" />|
|ResourceDllName|newbtns.dll <br>constr-50.ico<br/> test.bmp |Если установлен IconName то имя ресурсной dll<br>иначе - название иконки<br/>|если ResourceDllName и IconName пусто, то по умолчанию пропишется иконка <br>icons\cmd_intername.ico<br/>   |
|IconName|BEDIT|Название иконки, из ресурсной dll, только если в ResourceDllName имя библиотеки, иначе ничего||
|AppName|App|Приложение, может быть пустым, иначе верхний уровень меню называется по имени <br>-*.xls вкладки Excel<br/>- *.csv, *.tsv, *.txt  по имени файла|<img width="227" alt="image" src="https://github.com/user-attachments/assets/571b2281-4f96-4dcb-bf3d-ed1cbc6b5295" />|
|AddonName|Addon|Аддон, может быть пустым, иначе подменю под главным меню|<img width="230"   alt="image" src="https://github.com/user-attachments/assets/3057b7b8-b753-4a3c-8a62-748a3b4cad28" />|
|LocalName|блок_почистить|Локализованное имя команды||
|RealCommandName|shell_exec|Реальное имя команды||
|Keyword|open,https://doctorraz.blogspot.com|Ключевое слово||
|weight|число|Вес команды, по умолчанию 10||
|cmdtype|1 <br>0<br/>|Контекст выполнения команды, по умолчанию (1) <br/> 1-контекст документа<br/> 0-контекст приложения||
|StatusText|Тип линий примитивов по слою|Описание команды, показываемое в качестве всплывающей подсказки||
|ToolTipText|текст|Всплывающая подсказка||
|Accelerators|Alt+Q|Горячие клавиши|<img width="246"   alt="image" src="https://github.com/user-attachments/assets/4b017d42-8c5f-4ae7-920b-75a888114a1a" />|
|DontTake|ИСКЛЮЧИТЬ <br>ДОБАВИТЬ<br/>|Не регистрировать команду, эта строка будет пропущена если значение ИСКЛЮЧИТЬ||
|HideCommand|ИСКЛЮЧИТЬ <br>ДОБАВИТЬ<br/>|Команду зарегистрировать, но не показывать в интерфейсе, если ИСКЛЮЧИТЬ||
|IsVirtualPanel|ИСКЛЮЧИТЬ |Виртуальная панель <br>Флаг указывает, что команда должна быть в меню на одном уровне со своей панелью<br/> |<img width="360"   alt="image" src="https://github.com/user-attachments/assets/9b110873-f2e1-4fb2-b55a-64d3a4470933" />|
 
 [Подробнее про параметры конфигурации меню можно почитать тут](3.1-Регистрация-команд)
 
## Как загрузить свое меню и ленту в nanoCAD

### Способы загрузки
 
#### 1. Через настройки пользовательского интерфейса. 

Самый очевидный и простой способ загрузки меню в нанокад 

<img width="1103"  alt="image" src="https://github.com/user-attachments/assets/a5c25992-f1e7-4409-9ee2-ede0bea86b8a" />

<img width="519"   alt="image" src="https://github.com/user-attachments/assets/70cbdd1e-fe13-4522-83a5-96b2a4f01aa9" />

> [!WARNING]
В nanoCAD есть древняя бага,  при подключении частичного файла меню \
nanoCAD скопирует файл \*.cfg в каталог `%AppData%\Roaming\Nanosoft\nanoCAD x64 ХХ.х\config\`
а файл \*.cuix ленты нет, соответственно лента не будет подгружена. \
Все же разбрасывать по всему диску фалы конфигов, настройки ленты и сами аддоны не есть хорошо (

#### 2. Ручная правка nanoCAD.cfg

Дописать в файл настроек _%AppData%\Roaming\Nanosoft\nanoCAD x64 ХХ\config\nanoCAD.cfg_ путь к файлу конфигурации: \
`#include "d:\@Developers\Programmers\!NET\!bundle\BlockFix.bundle\Resources\BlockFix.cfg"`

####  3. Автозагрузка из \*.cfg  nanoCAD

 <img width="783"   alt="image" src="https://github.com/user-attachments/assets/b4ab4017-405a-4eee-a4e2-8b8ca6bc6158" />

 <img width="607"   alt="image" src="https://github.com/user-attachments/assets/5fbe4fd1-b9e7-4ccd-9529-d520b648ef87" />

> [!IMPORTANT]
nanoCAD не умеет напрямую из автозагрузки грузить файлы \*.cfg, поэтому нужен промежуточный файл .package (в кодировке UTF8), в котором в секции `ConfigEntry` прописываем пути к файлам меню (\*.cfg ), в секции `ComponentEntry` пути к загружаемым приложениям:
```xml
<?xml version="1.0" encoding="utf-8" ?>
<ApplicationPackage xmlns="hostApplicationPackage/v01"
                    Name="drzTools">
	<Components>
		<ComponentEntry AppName="BlockFix"
		                ModuleName="/BlockFix.bundle/BlockFix.NCad.dll"
		                ModuleType="MGD"/>

		<ConfigEntry FileName="/BlockFix.bundle/Resources/BlockFix.cfg"
		             FileType="CFG"/>
	</Components>
</ApplicationPackage>
```

> [!TIP]
Для загрузки способами 1-3 достаточно прав обычного пользователя, повышение прав не требуется.

####  4. Через _nApp.cfg_ или _userdata.cfg_

Создать файл _nApp.cfg_ или _userdata.cfg_  (в кодировке UTF8 BOM) и прописать в него пути к файлам конфигураций: 

`#include "d:\@Developers\Programmers\!NET\!bundle\BlockFix.bundle\Resources\BlockFix.cfg"`

_nApp.cfg_ или _userdata.cfg_ можно скопировать в любой из каталогов:
- %ProgramFiles%\Nanosoft\nanoCAD x64 ХХ.х\
- %AppData%\Roaming\Nanosoft\nanoCAD x64 ХХ.х\Config\
- %ProgramData%\Nanosoft\nanoCAD x64 ХХ.х\Config\

> [!WARNING]
> Для записи и изменения в каталоге:
> - `%AppData%` повышение прав не требуется
> - `%ProgramData%\Nanosoft\nanoCAD x64 ХХ.х` у пользователя есть права только на запись, на изменение нет, это значит, что скопировать файл в этот каталог  пользователь сможет, но ни удалить не изменить без повышения прав нет. (хз отчего так сделано)
> - `%ProgramFiles%\Nanosoft\nanoCAD x64 ХХ.х` нужно повышение прав.

#### 5. Автозагрузка из реестра

 <img width="1378"   alt="image" src="https://github.com/user-attachments/assets/d76a16d3-b972-4d85-94ef-8c3508ec272c" />

В разделе _HKEY_LOCAL_MACHINE\SOFTWARE\Nanosoft\nanoCAD x64\ХХ.х_ 
добавляем подраздел `Applications`
в этом подразделе еще один подраздел с названием нашего приложения `BlockFixNC`
в этом подразделе создаем строковый параметр 
имя `Package`, значение полный путь до нашего пакета `d:\@Developers\Programmers\!NET\!bundle\BlockFixNC.package`

в автозагрузке это будет выглядеть так:

<img width="607"  alt="image" src="https://github.com/user-attachments/assets/47865e9c-48de-49c1-a807-394d98f274eb" />

> [!WARNING]
для записи в секцию _HKEY_LOCAL_MACHINE_ требуется повышение прав

### Очередность загрузки

1. %ProgramFiles%\Nanosoft\nanoCAD x64 ХХ\nApp.cfg
1. %AppData%\Roaming\Nanosoft\nanoCAD x64 23.1\Config\nApp.cfg
1. %ProgramData%\Nanosoft\nanoCAD x64 ХХ\Config\nApp.cfg
1. %ProgramFiles%\Nanosoft\nanoCAD x64 ХХ\userdata.cfg
1. %AppData%\Roaming\Nanosoft\nanoCAD x64 23.1\Config\userdata.cfg
1. %ProgramData%\Nanosoft\nanoCAD x64 ХХ\Config\userdata.cfg 
1. %AppData%\Roaming\Nanosoft\nanoCAD x64 ХХ\config\nanoCAD.cfg 
1. %AppData%\Roaming\Nanosoft\nanoCAD x64 ХХ\config\cfg.cfg (штатная автозагрузка) 
1. HKEY_LOCAL_MACHINE\SOFTWARE\Nanosoft\nanoCAD x64\ХХ.х\Applications\ (из реестра)
 
> [!WARNING]
> - nApp.cfg всегда загружаются перед userdata.cfg
> - Если файлы `nApp` или `userdata` скопированы в несколько каталогов, то загрузится только первый одноименный найденный файл, в порядке приведенном выше, остальные файлы грузиться не будут!
> - `nApp` и `userdata` загружаются независимо друг от друга

> [!TIP]
все вышенаписанное про порядок загрузки \*.cfg относится и к файлам \*.ini \
подробнее про загрузку приложений можно почитать у Алексея Кулика [Автозагрузка приложений nanoCAD и ее последовательность](https://autolisp.ru/2023/12/13/nanocad-addon-loading/)

### Особенности загрузки меню

При загрузке меню через:
1. `nApp`, `userdata` или `nanoCAD.cfg`, меню будет загружено во все профили (платформа, СПДС, Механика) и возможности отключить загрузку в профиле нет, но nanoCAD умеет загружать меню по условию, т.е. если в конфиге загрузки прописать:
```ini
#include condition="ComponentEnabled_nMechComp" "d:\@Developers\В работе\!Текущее\Programmers\!NET\!bundle\PlotSPDS.bundle\Resources\Mech_menu.cfg"
#include condition="ComponentEnabled_nSPDSComp" "d:\@Developers\В работе\!Текущее\Programmers\!NET\!bundle\PlotSPDS.bundle\Resources\SPDS_menu.cfg"
```
то первое меню будет загружаться только в профиль Механика, второе в профиль СПДС.
допустимы ключевые слова, `or` `not` возможно какие то еще...:
```ini
#include condition="ComponentEnabled_MODELER3D or ComponentEnabled_MODELER3D_C3D" "nmenu3D.cfg"
#include condition="not ComponentEnabled_RasterTools"                             "RasterTools.cfg"
```

2. HKEY_LOCAL_MACHINE\SOFTWARE\Nanosoft\nanoCAD x64\ХХ.х\Applications\ (из реестра)
меню будет загружаться во все профили, но в автозагрузке (из под профиля) меню можно отключить

<img width="607"   alt="image" src="https://github.com/user-attachments/assets/03d695dc-4ff2-4060-b4f4-e898026af405" />

3. Штатная автозагрузка (%AppData%\Roaming\Nanosoft\nanoCAD x64 ХХ\config\cfg.cfg) загрузит меню только в свой профиль

> [!TIP]
Пути к файлам меню (\*.cfg) могут быть как абсолютными, так и относительными. Относительный путь отсчитывается от файла в котором прописан путь к конфигу.
Регистр символов не важен.
